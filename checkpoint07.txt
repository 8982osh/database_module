1. How do you find related data held in two separate data tables?

You would use a JOIN on both tables to combine the data.

2. Explain, in your own words, the difference between an INNER JOIN, LEFT OUTER JOIN, and RIGHT OUTER JOIN. Give a real-world example for each.

An INNER JOIN selects matching columns from both of the tables.

SELECT *
FROM cats
INNER JOIN animals 
ON cats.hairball = animals.shed_happens; 

A LEFT OUTER JOIN takes all the columns on the left table, and matches them with the columns on right table.

SELECT dogfood.brand, food.feeding_guie 
FROM dogwood
LEFT OUTER JOIN food
ON food.id = dogfood.id;

A RIGHT OUTER JOIN takes the columns from the right table, and matches them with the columns on the left table.

SELECT pets.name, owners.name
FROM owners
RIGHT OUTER JOIN pets
ON pets.name_id = owners.name_id;

3. Define primary key and foreign key. Give a real-world example for each.

A primary key is a value that is unique and does not have a duplicate. This value provides the link for all data within a row. The foreign key is the value in one table that has the same value as the primary key in another table. 

table primary_key = birthdate 
table foreign_key = birthdate 

4. Define aliasing.

Aliasing is when you use an abbreviation to represent the table name. This makes a query shorter to read and type.

5. Change this query so that you are using aliasing:

SELECT professor.name, compensation.salary,
compensation.vacation_days FROM professor JOIN
compensation ON professor.id =
compensation.professor_id;  
SELECT p.name, c.salary, c.vacation_days
FROM p 
JOIN c ON p.id = c.professor_id;

6. Why would you use a NATURAL JOIN? Give a real-world example.

You would use a NATURAL JOIN for tables that have the same column name.

SELECT * 
FROM 
patients
NATURAL JOIN SSN

7. Using this Employee schema and data, write queries to find the following information:

• List all employees and all shifts.

**Query #1**

    SELECT employees.name
    FROM employees;

| name               |
| ------------------ |
| Hermione Granger   |
| Ronald Weasley     |
| Luna Lovegood      |
| Draco Malfoy       |
| Padma Patil        |
| Neville Longbottom |
| Cedric Diggory     |
| Cho Chang          |
| Dean Thomas        |

---
**Query #2**

    SELECT shifts.id
    FROM shifts;

| id  |
| --- |
| 1   |
| 2   |
| 3   |
| 4   |
| 5   |
| 6   |
| 7   |
| 8   |
| 9   |
| 10  |
| 11  |
| 12  |
| 13  |
| 14  |
| 15  |
| 16  |
| 17  |
| 18  |
| 19  |
| 20  |
| 21  |
| 22  |
| 23  |
| 24  |
| 25  |

8. Using this Adoption schema and data, please write queries to retrieve the following information and include the results:

• Create a list of all volunteers. If the volunteer is fostering a dog, include each dog as well.
  
**Query #1**

    SELECT volunteers.first_name, volunteers.last_name, dogs.name
    FROM volunteers
    LEFT JOIN dogs
    ON volunteers.foster_dog_id = dogs.id;

| first_name | last_name  | name      |
| ---------- | ---------- | --------- |
| Rubeus     | Hagrid     | Munchkin  |
| Marjorie   | Dursley    | Marmaduke |
| Sirius     | Black      |           |
| Remus      | Lupin      |           |
| Albus      | Dumbledore |           |

• The cat's name, adopter's name, and adopted date for each cat adopted within the past month to be displayed as part of the "Happy Tail" social media promotion which posts recent successful adoptions.
   
**Query #1**

    SELECT cats.name, adopters.first_name, adopters.last_name, to_char(cat_adoptions.date, 'mm/dd/yyyy')
    
    FROM cat_adoptions
    JOIN cats ON cats.id = cat_adoptions.cat_id
    JOIN adopters ON adopters.id = cat_adoptions.adopter_id
    WHERE (cat_adoptions.date > CURRENT_DATE - INTERVAL '30 days');

| name     | first_name | last_name | to_char    |
| -------- | ---------- | --------- | ---------- |
| Mushi    | Arabella   | Figg      | 04/20/2019 |
| Victoire | Argus      | Filch     | 04/25/2019 |

• Create a list of adopters who have not yet chosen a dog to adopt.

**Query #1**

    SELECT adopters.first_name, adopters.last_name
    FROM adopters 
    JOIN dog_adoptions ON dog_adoptions.adopter_id = adopters.id
    WHERE dog_adoptions.adopter_id != dog_adoptions.dog_id;

| first_name | last_name |
| ---------- | --------- |
| Argus      | Filch     |

• Lists of all cats and all dogs who have not been adopted.

**Query #1**

    SELECT cats.name, cat_adoptions.adopter_id
    FROM cats
    LEFT JOIN cat_adoptions 
    ON cats.id = cat_adoptions.adopter_id 
    WHERE cat_adoptions.adopter_id IS NULL;

| name     | adopter_id |
| -------- | ---------- |
| Victoire |            |
| Nala     |            |

---
**Query #2**

    SELECT dogs.name, dog_adoptions.adopter_id
    FROM dogs
    LEFT JOIN dog_adoptions
    ON dogs.id = dog_adoptions.adopter_id
    WHERE dog_adoptions.adopter_id IS NULL;

| name      | adopter_id |
| --------- | ---------- |
| Boujee    |            |
| Munchkin  |            |
| Marley    |            |
| Lassie    |            |
| Marmaduke |            |
| Rosco     |            |

---

• The name of the person who adopted Rosco.

**Query #1**

    SELECT dogs.name, adopters.first_name, adopters.last_name
    FROM dogs
    JOIN dog_adoptions ON dogs.id = dog_adoptions.dog_id
    JOIN adopters ON dog_adoptions.adopter_id = adopters.id
    WHERE dogs.name = 'Rosco';

| name  | first_name | last_name |
| ----- | ---------- | --------- |
| Rosco | Argus      | Filch     |

9. Using this Library schema and data, write queries applying the following scenarios and include the results:

• To determine if the library should buy more copies of a given book, please provide the names and position, in order, of all of the patrons with a hold (request for a book with all copies checked out) on "Advanced Potion-Making".

**Query #1**

    SELECT books.title, patrons.name, holds.rank
    FROM books
    JOIN holds ON books.isbn = holds.isbn
    JOIN patrons ON patrons.id = holds.patron_id 
    WHERE books.title = 'Advanced Potion-Making'
    ORDER BY holds.rank ASC;

| title                  | name           | rank |
| ---------------------- | -------------- | ---- |
| Advanced Potion-Making | Terry Boot     | 1    |
| Advanced Potion-Making | Cedric Diggory | 2    |

• List all of the library patrons. If they have one or more books checked out, list the books with the patrons.

**Query #1**

    SELECT patrons.name, books.title
    FROM patrons
    JOIN transactions ON patrons.id = transactions.patron_id
    JOIN books ON books.isbn = transactions.isbn
    ORDER BY patrons.name ASC;

| name             | title                                   |
| ---------------- | --------------------------------------- |
| Cedric Diggory   | Fantastic Beasts and Where to Find Them |
| Cho Chang        | Advanced Potion-Making                  |
| Hermione Granger | Fantastic Beasts and Where to Find Them |
| Hermione Granger | Hogwarts: A History                     |
| Padma Patil      | Fantastic Beasts and Where to Find Them |
| Terry Boot       | Advanced Potion-Making                  |
| Terry Boot       | Fantastic Beasts and Where to Find Them |



